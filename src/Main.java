import Lab1.GLIBC;
import Lab1.Generator;
import Lab1.LCG;

import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;

/**
 * Class used to test current Lab list. Each package describes specific list and has its own Main class.
 */
public class Main {

    /**
     * If you simply want to test current Lab list, just run this method. I will update this method each laboratory list.
     * @param args You don't need this argument.
     */
    public static void main(String[] args) {
        try {
            Generator lcg = new LCG();


            switch (Generator.whatGenerator(lcg)) {
                case LCG:
                    System.out.println("A LCG was distinguished as LCG.\n\n");
                    break;
                case GLIBC:
                    System.out.println("A LCG was distinguished as GLIBC.\n\n");
                    break;
                case NONE:
                    System.out.println("A LCG wasn't correctly distinguished.\n\n");
                    break;
                case BOTH:
                    System.out.println("A LCG was distinguished as both, LCG and GLIBC.\n\n");
                    break;
            }

            List<BigInteger> list1 = lcg.generateList(100);

            if (lcg.isGenerated(list1) )
                System.out.println("A list: \n'" + list1 + "'\n was generated by LCG.\n\n");

            List<BigInteger> list2 = new LinkedList<>();
            for (int i = 0; i < 20; i++) {
                list2.add(new BigInteger("1"));
                list2.add(new BigInteger("3"));
                list2.add(new BigInteger("-2"));
                list2.add(new BigInteger("4"));
                list2.add(new BigInteger("-7"));
                list2.add(new BigInteger("8"));
            }

            if (!lcg.isGenerated(list2) )
                System.out.println("A list: \n'" + list2 + "'\n wasn't generated by LCG.\n\n");

            Generator glibc = new GLIBC();


            switch (Generator.whatGenerator(glibc)) {
                case LCG:
                    System.out.println("A GLIBC was distinguished as LCG.\n\n");
                    break;
                case GLIBC:
                    System.out.println("A GLIBC was distinguished as GLIBC.\n\n");
                    break;
                case NONE:
                    System.out.println("A GLIBC wasn't correctly distinguished.\n\n");
                    break;
                case BOTH:
                    System.out.println("A GLIBC was distinguished as both, LCG and GLIBC.\n\n");
            }


            List<BigInteger> list3 = glibc.generateList(100);

            if (glibc.isGenerated(list3))
                System.out.println("A list: \n'" + list3 + "'\n was generated by GLIBC.\n\n");

            if (!glibc.isGenerated(list2) )
                System.out.println("A list: \n'" + list2 + "'\n wasn't generated by GLIBC.\n\n");

        } catch (Exception e) {
            System.out.println(e.getMessage());
        }
    }
}