package Lab1;

import java.util.Arrays;

public class GLIBC {
    private int MAX;
    private int seed;
    //            2^31 = 2147483647 - 1
    private static final int modulo = 2147483647;
    private static final int multiplier = 16807;
    private static final int firstBound = 31;
    private static final int secondBound = 34;
    private static final int thirdBound = 344;

    /**
     * @param MAX Elements in output string.
     * @param seed An seed used to generator. It is used to distinguish outputs.
     * @throws Exception When arguments are negative.
     */
    public GLIBC(int MAX, int seed) throws Exception {
        if (MAX < thirdBound) throw new Exception("String should be longer.");
        if (seed < 0) throw new Exception("String of negative seed cannot be generated.");
        this.MAX = MAX;
        this.seed = seed;
    }

    /**
     * Constructs a generator with default size of string and default seed.
     */
    public GLIBC() {
        this.MAX = 1000;
        this.seed = 1;
    }

    /**
     * @return String generated by the GLIBC's random method with parameters given to the constructor.
     */
    public String generateString() {

        StringBuilder output = new StringBuilder();
        int[] r = new int[this.MAX];

        r[0] = this.seed;
        for (int i = 1; i < firstBound; i++) {
            r[i] = (multiplier * r[i - 1]) % modulo;
            if (r[i] < 0) {
                r[i] += modulo;
            }
        }
//        for (int i = firstBound; i < secondBound; i++) {
//            r[i] = r[i - firstBound];
//        }
        System.arraycopy(r, 0, r, firstBound, secondBound - firstBound);

        for (int i = secondBound; i < thirdBound; i++) {
            r[i] = r[i - firstBound] + r[i - 3];
        }

        for (int i = thirdBound; i < this.MAX; i++) {
            r[i] = r[i - firstBound] + r[i - 3];
            output.append(r[i] >> 1);
            output.append("_");
        }
        return output.toString();
    }

    /**
     * Distinguishes if given string was created by the GLIBC generator.
     * @param str String to perform operation.
     * @return True if string can be generated by the GLIBC method.
     */
    public static boolean isGLIBC(String str) {
        int[] numbers = Arrays.stream(str.split("_")).mapToInt(Integer::parseInt).toArray();
        int s = 1;
        int maxSeed = 1000;
        int MAX = numbers.length + thirdBound;

        while (s < maxSeed) {

            StringBuilder output = new StringBuilder();
            int[] r = new int[MAX];

            r[0] = s;
            for (int i = 1; i < firstBound; i++) {
                r[i] = (multiplier * r[i - 1]) % modulo;
                if (r[i] < 0) {
                    r[i] += modulo;
                }
            }
            System.arraycopy(r, 0, r, firstBound, secondBound - firstBound);

            for (int i = secondBound; i < thirdBound; i++) {
                r[i] = r[i - firstBound] + r[i - 3];
            }

            for (int i = thirdBound; i < MAX; i++) {
                r[i] = r[i - firstBound] + r[i - 3];
                output.append(r[i] >> 1);
                output.append("_");
            }
            System.out.println(output);
            if (output.toString().equals(str))
                return true;
            s++;
        }
        return false;
    }
}