package Lab1;

import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;

/**
 * An abstract class, created to be inherited by specific pseudorandom generator class. It has methods like nextValue() or isGenerated(),
 * what have abstract functionality and signatures, but are implemented for specific generator.
 * Class is inherited by the LCG and GLIBC generators, but is open for another implementations.
 */
public abstract class Generator {
    protected long seed;
    private static final int TRIES = 10_000;

    protected List<BigInteger> values;

    /**
     * An abstract method inherited to return next value of the pseudorandom generator based on its current state.
     * @return Pseudorandom number based on current state of generator.
     */
    public abstract BigInteger nextValue();

    /**
     * An abstract method used to check, whether given list could have been generated by generator, what inherits this class.
     * @param list A list of generated values.
     * @return True, if could have been generated by generator, what inherits this class.
     * @throws Exception Thrown depending of specific functionality of this method. Usually it's related to size of list.
     */
    public abstract boolean isGenerated(List<BigInteger> list) throws Exception;

    /**
     * Generates a list of specific size by generator, what inherits this class.
     * @param size Size of the list.
     * @return List generated by specific generator.
     */
    public List<BigInteger> generateList(int size) {
        LinkedList<BigInteger> list = new LinkedList<>();
        for (int i = 0; i < size; i++) {
            list.add(this.nextValue());
        }
        return list;
    }

    /**
     * Check, if given generator is LCG or GLIBC, or none of formers.
     * @param generator An generator to check.
     * @return One of enum values.
     * @throws Exception if there are generated too little of elements for specific methods.
     */
    public static DistinguisherResult whatGenerator(Generator generator) throws Exception {
        List<BigInteger> list = generator.generateList(100);

        LCG distinguisherLCG = new LCG();
        boolean isGeneratedLCG = distinguisherLCG.isGenerated(list);
        LCG distinguisherGLIBC = new LCG();
        boolean isGeneratedGLIBC = distinguisherGLIBC.isGenerated(list);

        DistinguisherResult result = DistinguisherResult.NONE;
        if (isGeneratedLCG) {
            list = generator.generateList(TRIES);
            isGeneratedLCG = distinguisherLCG.isGenerated(list);
            if (isGeneratedLCG)
                result = DistinguisherResult.LCG;
        }

        if (isGeneratedGLIBC) {
            list = generator.generateList(TRIES);
            isGeneratedGLIBC = distinguisherGLIBC.isGenerated(list);
            if (isGeneratedGLIBC)
                result = DistinguisherResult.GLIBC;
        }

        if (isGeneratedLCG && isGeneratedGLIBC)
            result = DistinguisherResult.BOTH;

        return result;
    }
}

