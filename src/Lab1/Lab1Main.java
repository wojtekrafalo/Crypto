package Lab1;

import java.math.BigInteger;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

/**
 * Class used to test first Lab list.
 */
public class Lab1Main {
    /**
     * If you want to test first Lab list, just run this method. I predicted a bit of the cases.
     *
     * @param args You don't need this argument.
     */
    public static void main(String[] args) {
        try {
            testLCG();
            testGLIBC();
            testDistinguisher();
        } catch (Exception e) {
            System.out.println("Error found: " + e.getMessage());
        }
    }

    /**
     * A method created to test the distinguish method in Generator class.
     * @throws Exception if too little elements were generated.
     */
    private static void testDistinguisher() throws Exception {
        Generator gen;
        Random random = new Random();
        int rand = random.nextInt();
        String what;

        if (rand % 2 >= 0) {
            gen = new LCG();
            what = "LCG";
        } else {
            gen = new GLIBC();
            what = "GLIBC";
        }

        DistinguisherResult generatedDistinguished = Generator.whatGenerator(gen);
        String dist = "";
        switch (generatedDistinguished) {
            case LCG:
                dist = "LCG.";
                break;
            case GLIBC:
                dist = "GLIBC.";
                break;
            case NONE:
                dist = "none of the generators: LCG or GLIBC.";
                break;
            case BOTH:
                dist = "both, LCG and GLIBC.";
                break;
        }
        System.out.println("One of random generator is " + what + " and was distinguished as " + dist);
    }

    /**
     * A method created to test the distinguish method in LCG class.
     *
     * @throws Exception if too little elements were generated.
     */
    private static void testLCG() throws Exception {

        Generator lcg = new LCG();
        List<BigInteger> list1 = lcg.generateList(100);
        String msg1 = printDistinguisher(list1, DistinguisherResult.LCG, lcg.isGenerated(list1));
        System.out.println(msg1);


        List<BigInteger> list2 = new LinkedList<>();
        for (int i = 0; i < 20; i++) {
            list2.add(new BigInteger("1"));
            list2.add(new BigInteger("3"));
            list2.add(new BigInteger("2"));
            list2.add(new BigInteger("4"));
            list2.add(new BigInteger("7"));
            list2.add(new BigInteger("8"));
        }

        String msg2 = printDistinguisher(list2, DistinguisherResult.LCG, lcg.isGenerated(list2));
        System.out.println(msg2);
    }

    /**
     * A method created to test the distinguish method in GLIBC class.
     *
     * @throws Exception if too little elements were generated.
     */
    private static void testGLIBC() throws Exception {
        Generator glibc = new GLIBC();
        List<BigInteger> list1 = glibc.generateList(100);
        String msg1 = printDistinguisher(list1, DistinguisherResult.GLIBC, glibc.isGenerated(list1));

        List<BigInteger> list2 = new LinkedList<>();
        for (int i = 0; i < 20; i++) {
            list2.add(new BigInteger("1"));
            list2.add(new BigInteger("-1"));
        }

        String msg2 = printDistinguisher(list2, DistinguisherResult.GLIBC, glibc.isGenerated(list2));
        System.out.println(msg1 + "\n" + msg2);
    }

    /**
     * A method used to simplify reporting messages, whether some list was generated by concrete generator.
     *
     * @param str A list of integers from generator.
     * @param gen Name of the generator.
     * @param was True, if a list was generated by given generator.
     * @return A simplified report of used distinguisher.
     */
    private static String printDistinguisher(List<BigInteger> str, DistinguisherResult gen, boolean was) {
        String affirmative = "was";
        String whatGen = "neither, LCG or GLIBC generator.";
        switch (gen) {
            case LCG:
                whatGen = "LCG";
                break;
            case GLIBC:
                whatGen = "GLIBC";
                break;
            case NONE:
                was = false;
                break;
        }
        if (!was)
            affirmative = "was not";

        return ("A list: \n'" + str.toString() + "'\n" + affirmative + " generated by " + whatGen + ".\n\n");
    }
}